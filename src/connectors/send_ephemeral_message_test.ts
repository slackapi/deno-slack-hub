/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../dev_deps.ts";
import { DefineWorkflow } from "../dev_deps.ts";
import { ManifestFunctionSchema } from "../dev_deps.ts";
import { Schema } from "../deps.ts";
import SendEphemeralMessage from "./send_ephemeral_message.ts";

Deno.test("SendEphemeralMessage generates valid FunctionManifest", () => {
  assertEquals(
    SendEphemeralMessage.definition.callback_id,
    "slack#/functions/send_ephemeral_message",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Send an ephemeral message",
    description: "Send a private message to someone in a channel",
    input_parameters: {
      properties: {
        channel_id: {
          type: Schema.slack.types.channel_id,
          description: "Search all channels",
          title: "Select a channel",
        },
        user_id: {
          type: Schema.slack.types.user_id,
          description: "Search all people",
          title: "Select a member of the channel",
        },
        message: {
          type: Schema.slack.types.rich_text,
          description: "Add a message",
          title: "Add a message",
        },
        thread_ts: {
          type: Schema.types.string,
          description:
            "Provide another message's ts value to make this message a reply",
          title: "Another message's timestamp value",
        },
      },
      required: ["channel_id", "user_id", "message"],
    },
    output_parameters: {
      properties: {
        message_ts: {
          type: Schema.slack.types.message_ts,
          description: "Message time stamp",
          title: "Message time stamp",
        },
      },
      required: ["message_ts"],
    },
  };
  const actual = SendEphemeralMessage.export();

  assertEquals(actual, expected);
});

Deno.test("SendEphemeralMessage can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_SendEphemeralMessage_slack_function",
    title: "Test SendEphemeralMessage",
    description: "This is a generated test to test SendEphemeralMessage",
  });
  testWorkflow.addStep(SendEphemeralMessage, {
    channel_id: "test",
    user_id: "test",
    message: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/send_ephemeral_message");
  assertEquals(actual.inputs, {
    channel_id: "test",
    user_id: "test",
    message: "test",
  });
});

Deno.test("All outputs of Slack function SendEphemeralMessage should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_SendEphemeralMessage_slack_function",
    title: "Test SendEphemeralMessage",
    description: "This is a generated test to test SendEphemeralMessage",
  });
  const step = testWorkflow.addStep(SendEphemeralMessage, {
    channel_id: "test",
    user_id: "test",
    message: "test",
  });
  assertExists(step.outputs.message_ts);
});
