/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import CreateIncident from "./create_incident.ts";

Deno.test("CreateIncident generates valid FunctionManifest", () => {
  assertEquals(
    CreateIncident.definition.callback_id,
    "slack#/functions/create_incident",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Create a Pagerduty Incident",
    description: "This step creates a new Pagerduty Incident",
    input_parameters: {
      properties: {
        title: {
          type: Schema.types.string,
          description: "Incident title",
          title: "Title",
        },
        details: {
          type: Schema.types.string,
          description: "Incident details",
          title: "Details",
        },
        pagerduty_access_token: {
          type: Schema.slack.types.oauth2,
          description: "Pagerduty access token",
          title: "PagerDuty access token",
        },
        pagerduty_team_id: {
          type: Schema.types.string,
          description: "PagerDuty Team",
          title: "PagerDuty Team",
        },
        service_id: {
          type: Schema.types.string,
          description: "PagerDuty Service",
          title: "Service",
        },
        escalation_policy: {
          type: Schema.types.string,
          description: "PagerDuty Escalation policy",
          title: "Escalation policy",
        },
      },
      required: [
        "title",
        "details",
        "pagerduty_team_id",
        "service_id",
        "escalation_policy",
      ],
    },
    output_parameters: {
      properties: {
        incident_id: {
          type: Schema.types.string,
          description: "Incident id",
          title: "Incident Id",
        },
        incident_url: {
          type: Schema.types.string,
          description: "Incident url",
          title: "Incident url",
        },
      },
      required: [],
    },
  };
  const actual = CreateIncident.export();

  assertEquals(actual, expected);
});

Deno.test("CreateIncident can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIncident_slack_function",
    title: "Test CreateIncident",
    description: "This is a generated test to test CreateIncident",
  });
  testWorkflow.addStep(CreateIncident, {
    title: "test",
    details: "test",
    pagerduty_team_id: "test",
    service_id: "test",
    escalation_policy: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/create_incident");
  assertEquals(actual.inputs, {
    title: "test",
    details: "test",
    pagerduty_team_id: "test",
    service_id: "test",
    escalation_policy: "test",
  });
});

Deno.test("All outputs of Slack function CreateIncident should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIncident_slack_function",
    title: "Test CreateIncident",
    description: "This is a generated test to test CreateIncident",
  });
  const step = testWorkflow.addStep(CreateIncident, {
    title: "test",
    details: "test",
    pagerduty_team_id: "test",
    service_id: "test",
    escalation_policy: "test",
  });
  assertExists(step.outputs.incident_id);
  assertExists(step.outputs.incident_url);
});
