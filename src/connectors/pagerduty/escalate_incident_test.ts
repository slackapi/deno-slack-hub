/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import EscalateIncident from "./escalate_incident.ts";

Deno.test("EscalateIncident generates valid FunctionManifest", () => {
  assertEquals(
    EscalateIncident.definition.callback_id,
    "slack#/functions/escalate_incident",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Escalate / De-escalate a Pagerduty Incident",
    description: "This step escalates/deescalates a Pagerduty Incident",
    input_parameters: {
      properties: {
        incident_id: {
          type: Schema.types.string,
          description: "Incident id",
          title: "Incident Id",
        },
        escalation_level: {
          type: Schema.types.integer,
          description: "Escalation level",
          title: "Escalation level",
        },
        pagerduty_access_token: {
          type: Schema.slack.types.oauth2,
          description: "Pagerduty access token",
          title: "PagerDuty access token",
        },
      },
      required: ["incident_id", "escalation_level", "pagerduty_access_token"],
    },
    output_parameters: {
      properties: {
        incident_id: {
          type: Schema.types.string,
          description: "Incident id",
          title: "Incident Id",
        },
        incident_url: {
          type: Schema.types.string,
          description: "Incident url",
          title: "Incident url",
        },
        assignments: {
          type: Schema.types.array,
          description: "Assignments",
          title: "Assignments",
          items: { type: undefined },
        },
      },
      required: [],
    },
  };
  const actual = EscalateIncident.export();

  assertEquals(actual, expected);
});

Deno.test("EscalateIncident can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_EscalateIncident_slack_function",
    title: "Test EscalateIncident",
    description: "This is a generated test to test EscalateIncident",
  });
  testWorkflow.addStep(EscalateIncident, {
    incident_id: "test",
    escalation_level: "test",
    pagerduty_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/escalate_incident");
  assertEquals(actual.inputs, {
    incident_id: "test",
    escalation_level: "test",
    pagerduty_access_token: "test",
  });
});

Deno.test("All outputs of Slack function EscalateIncident should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_EscalateIncident_slack_function",
    title: "Test EscalateIncident",
    description: "This is a generated test to test EscalateIncident",
  });
  const step = testWorkflow.addStep(EscalateIncident, {
    incident_id: "test",
    escalation_level: "test",
    pagerduty_access_token: "test",
  });
  assertExists(step.outputs.incident_id);
  assertExists(step.outputs.incident_url);
  assertExists(step.outputs.assignments);
});
