/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import ResolveIncident from "./resolve_incident.ts";

Deno.test("ResolveIncident generates valid FunctionManifest", () => {
  assertEquals(
    ResolveIncident.definition.callback_id,
    "slack#/functions/resolve_incident",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Resolve a Pagerduty Incident",
    description: "This step marks a Pagerduty Incident as resolved",
    input_parameters: {
      properties: {
        incident_id: {
          type: Schema.types.string,
          description: "Incident id",
          title: "Incident Id",
        },
        resolution_note: {
          type: Schema.types.string,
          description: "Resolution note",
          title: "Resolution note",
        },
        pagerduty_access_token: {
          type: Schema.slack.types.oauth2,
          description: "Pagerduty access token",
          title: "PagerDuty access token",
        },
      },
      required: ["incident_id", "resolution_note", "pagerduty_access_token"],
    },
    output_parameters: {
      properties: {
        incident_id: {
          type: Schema.types.string,
          description: "Incident id",
          title: "Incident Id",
        },
        incident_url: {
          type: Schema.types.string,
          description: "Incident url",
          title: "Incident url",
        },
        status: {
          type: Schema.types.string,
          description: "Status",
          title: "Status",
        },
        resolution_note: {
          type: Schema.types.string,
          description: "Resolution note",
          title: "Resolution note",
        },
        last_status_change_by: {
          type: Schema.types.string,
          description: "Last status change by",
          title: "Last status change by",
        },
        last_status_change_at: {
          type: Schema.types.string,
          description: "Last status change at",
          title: "Last status change at",
        },
      },
      required: [
        "incident_id",
        "incident_url",
        "status",
        "resolution_note",
        "last_status_change_by",
        "last_status_change_at",
      ],
    },
  };
  const actual = ResolveIncident.export();

  assertEquals(actual, expected);
});

Deno.test("ResolveIncident can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_ResolveIncident_slack_function",
    title: "Test ResolveIncident",
    description: "This is a generated test to test ResolveIncident",
  });
  testWorkflow.addStep(ResolveIncident, {
    incident_id: "test",
    resolution_note: "test",
    pagerduty_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/resolve_incident");
  assertEquals(actual.inputs, {
    incident_id: "test",
    resolution_note: "test",
    pagerduty_access_token: "test",
  });
});

Deno.test("All outputs of Slack function ResolveIncident should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_ResolveIncident_slack_function",
    title: "Test ResolveIncident",
    description: "This is a generated test to test ResolveIncident",
  });
  const step = testWorkflow.addStep(ResolveIncident, {
    incident_id: "test",
    resolution_note: "test",
    pagerduty_access_token: "test",
  });
  assertExists(step.outputs.incident_id);
  assertExists(step.outputs.incident_url);
  assertExists(step.outputs.status);
  assertExists(step.outputs.resolution_note);
  assertExists(step.outputs.last_status_change_by);
  assertExists(step.outputs.last_status_change_at);
});
