/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateMeeting from "./create_meeting.ts";

Deno.test("CreateMeeting can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateMeeting_slack_function",
    title: "Test CreateMeeting",
    description: "This is a generated test to test CreateMeeting",
  });
  testWorkflow.addStep(CreateMeeting, {
    title: "test",
    start_time: "test",
    end_time: "test",
    webex_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A050R5T1K6X#/functions/create_meeting");
  assertEquals(actual.inputs, {
    title: "test",
    start_time: "test",
    end_time: "test",
    webex_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreateMeeting should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateMeeting_slack_function",
    title: "Test CreateMeeting",
    description: "This is a generated test to test CreateMeeting",
  });
  const step = testWorkflow.addStep(CreateMeeting, {
    title: "test",
    start_time: "test",
    end_time: "test",
    webex_access_token: "test",
  });
  assertExists(step.outputs.meeting_id);
  assertExists(step.outputs.meeting_link);
  assertExists(step.outputs.meeting_number);
  assertExists(step.outputs.site_url);
  assertExists(step.outputs.host_webex_id);
  assertExists(step.outputs.invitee_emails);
});
