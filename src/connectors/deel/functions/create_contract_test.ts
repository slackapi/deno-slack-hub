/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateContract from "./create_contract.ts";

Deno.test("CreateContract can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateContract_slack_function",
    title: "Test CreateContract",
    description: "This is a generated test to test CreateContract",
  });
  testWorkflow.addStep(CreateContract, {
    deel_access_token: "test",
    title: "test",
    legal_entity_id: "test",
    team_id: "test",
    job_title: "test",
    documents_required: "test",
    contract_type: "test",
    start_date: "test",
    currency_code: "test",
    frequency: "test",
    cycle_end: "test",
    cycle_end_type: "test",
    payment_due_type: "test",
    payment_due_days: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A061MGQNY2K#/functions/create_contract");
  assertEquals(actual.inputs, {
    deel_access_token: "test",
    title: "test",
    legal_entity_id: "test",
    team_id: "test",
    job_title: "test",
    documents_required: "test",
    contract_type: "test",
    start_date: "test",
    currency_code: "test",
    frequency: "test",
    cycle_end: "test",
    cycle_end_type: "test",
    payment_due_type: "test",
    payment_due_days: "test",
  });
});

Deno.test("All outputs of Slack function CreateContract should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateContract_slack_function",
    title: "Test CreateContract",
    description: "This is a generated test to test CreateContract",
  });
  const step = testWorkflow.addStep(CreateContract, {
    deel_access_token: "test",
    title: "test",
    legal_entity_id: "test",
    team_id: "test",
    job_title: "test",
    documents_required: "test",
    contract_type: "test",
    start_date: "test",
    currency_code: "test",
    frequency: "test",
    cycle_end: "test",
    cycle_end_type: "test",
    payment_due_type: "test",
    payment_due_days: "test",
  });
  assertExists(step.outputs.contract_id);
  assertExists(step.outputs.contract_url);
});
