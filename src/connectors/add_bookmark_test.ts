/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import Schema.types from "../../schema_types.ts";
import Schema.slack.types from "../schema_types.ts";
import AddBookmark from "./add_bookmark.ts";

Deno.test("AddBookmark generates valid FunctionManifest", () => {assertEquals(AddBookmark.definition.callback_id, "slack#/functions/add_bookmark");
const expected: ManifestFunctionSchema = {source_file: "",
title: "Add a bookmark to channel",
description: "Automatically create a bookmark in a channel",
input_parameters: {properties: {channel_id: {type: SlackTypes.channel_id,
description: "Search all channels",
title: "Select a channel"},
name: {type: SchemaTypes.string,
description: "Enter the bookmark name",
title: "Bookmark name"},
link: {type: SchemaTypes.string,
description: "https://docs.acme.com",
title: "Bookmark Link"}},
required: ["channel_id","name","link"]},
output_parameters: {properties: {channel_id: {type: SlackTypes.channel_id,
description: "Channel",
title: "Channel"},
bookmark_name: {type: SchemaTypes.string,
description: "Bookmark name",
title: "Bookmark name"},
bookmark_link: {type: SchemaTypes.string,
description: "Bookmark link",
title: "Bookmark link"}},
required: ["channel_id","bookmark_name","bookmark_link"]}};
const actual = AddBookmark.export();

assertEquals(actual, expected);});

Deno.test("AddBookmark can be used as a Slack function in a workflow step", () => {const testWorkflow = DefineWorkflow({callback_id: "test_AddBookmark_slack_function", 
title: "Test AddBookmark", 
description: "This is a generated test to test AddBookmark"});
testWorkflow.addStep(AddBookmark, {channel_id: "test",
name: "test",
link: "test"});
const actual = testWorkflow.steps[0].export();

assertEquals(actual.function_id, "slack#/functions/add_bookmark");
assertEquals(actual.inputs, {channel_id: "test",
name: "test",
link: "test"});});

Deno.test("All outputs of Slack function AddBookmark should exist", () => {const testWorkflow = DefineWorkflow({callback_id: "test_AddBookmark_slack_function", 
title: "Test AddBookmark", 
description: "This is a generated test to test AddBookmark"});
const step = testWorkflow.addStep(AddBookmark, {channel_id: "test",
name: "test",
link: "test"});
assertExists(step.outputs.channel_id);
assertExists(step.outputs.bookmark_name);
assertExists(step.outputs.bookmark_link);});