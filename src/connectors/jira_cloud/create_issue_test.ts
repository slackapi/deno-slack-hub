/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import CreateIssue from "./create_issue.ts";

Deno.test("CreateIssue generates valid FunctionManifest", () => {
  assertEquals(
    CreateIssue.definition.callback_id,
    "slack#/functions/create_issue",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Jira Cloud - Create an Issue",
    description:
      "Create an issue in a Jira Cloud instance right from Slack. Does not support Jira Server.",
    input_parameters: {
      properties: {
        atlassian_access_token: {
          type: Schema.slack.types.oauth2,
          title: "Atlassian Access Token",
        },
        jira_domain: { type: Schema.types.string, title: "Jira Domain" },
        project: { type: Schema.types.string, title: "Project" },
        summary: {
          type: Schema.types.string,
          description: "Summary of the bug or issue to create.",
          title: "Summary",
        },
        description: {
          type: Schema.types.string,
          description: "Description of the bug or issue to create.",
          title: "Description",
        },
        issueType: {
          type: Schema.types.string,
          description:
            "Type of issue to create: Bug, Improvement, New Feature, or Epic.",
          title: "Issue Type",
        },
      },
      required: [],
    },
    output_parameters: {
      properties: {
        issue_key: { type: Schema.types.string, title: "Issue Key" },
      },
      required: [],
    },
  };
  const actual = CreateIssue.export();

  assertEquals(actual, expected);
});

Deno.test("CreateIssue can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  testWorkflow.addStep(CreateIssue, {});
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/create_issue");
  assertEquals(actual.inputs, {});
});

Deno.test("All outputs of Slack function CreateIssue should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  const step = testWorkflow.addStep(CreateIssue, {});
  assertExists(step.outputs.issue_key);
});
