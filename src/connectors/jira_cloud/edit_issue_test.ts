/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import EditIssue from "./edit_issue.ts";

Deno.test("EditIssue generates valid FunctionManifest", () => {
  assertEquals(EditIssue.definition.callback_id, "slack#/functions/edit_issue");
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Jira Cloud - Edit an Issue",
    description:
      "Edit an issue in a Jira Cloud instance right from Slack. Does not support Jira Server.",
    input_parameters: {
      properties: {
        atlassian_access_token: {
          type: Schema.slack.types.oauth2,
          title: "Atlassian Access Token",
        },
        jira_domain: { type: Schema.types.string, title: "Jira Domain" },
        issue_id: {
          type: Schema.types.string,
          description: "Issue ID",
          title: "Issue ID",
        },
        summary: {
          type: Schema.types.string,
          description: "Summary of the bug or issue to edit.",
          title: "Summary",
        },
        description: {
          type: Schema.types.string,
          description: "Description of the bug or issue to edit.",
          title: "Description",
        },
      },
      required: ["jira_domain", "issue_id"],
    },
    output_parameters: {
      properties: {
        status: {
          type: Schema.types.string,
          description: "Response Status",
          title: "Response Status",
        },
      },
      required: ["status"],
    },
  };
  const actual = EditIssue.export();

  assertEquals(actual, expected);
});

Deno.test("EditIssue can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_EditIssue_slack_function",
    title: "Test EditIssue",
    description: "This is a generated test to test EditIssue",
  });
  testWorkflow.addStep(EditIssue, { jira_domain: "test", issue_id: "test" });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/edit_issue");
  assertEquals(actual.inputs, { jira_domain: "test", issue_id: "test" });
});

Deno.test("All outputs of Slack function EditIssue should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_EditIssue_slack_function",
    title: "Test EditIssue",
    description: "This is a generated test to test EditIssue",
  });
  const step = testWorkflow.addStep(EditIssue, {
    jira_domain: "test",
    issue_id: "test",
  });
  assertExists(step.outputs.status);
});
