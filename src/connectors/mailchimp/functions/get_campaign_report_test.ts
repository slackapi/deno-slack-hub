/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import GetCampaignReport from "./get_campaign_report.ts";

Deno.test("GetCampaignReport can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_GetCampaignReport_slack_function",
    title: "Test GetCampaignReport",
    description: "This is a generated test to test GetCampaignReport",
  });
  testWorkflow.addStep(GetCampaignReport, {
    mailchimp_access_token: "test",
    campaign_id: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(
    actual.function_id,
    "A05TPV44YKG#/functions/get_campaign_report",
  );
  assertEquals(actual.inputs, {
    mailchimp_access_token: "test",
    campaign_id: "test",
  });
});

Deno.test("All outputs of Slack function GetCampaignReport should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_GetCampaignReport_slack_function",
    title: "Test GetCampaignReport",
    description: "This is a generated test to test GetCampaignReport",
  });
  const step = testWorkflow.addStep(GetCampaignReport, {
    mailchimp_access_token: "test",
    campaign_id: "test",
  });
  assertExists(step.outputs.campaign_type);
  assertExists(step.outputs.id);
  assertExists(step.outputs.status);
  assertExists(step.outputs.emails_sent);
  assertExists(step.outputs.opens);
  assertExists(step.outputs.unique_opens);
  assertExists(step.outputs.open_rate);
  assertExists(step.outputs.clicks);
  assertExists(step.outputs.unique_clicks);
  assertExists(step.outputs.click_rate);
});
