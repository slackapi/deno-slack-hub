/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateCampaign from "./create_campaign.ts";

Deno.test("CreateCampaign can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateCampaign_slack_function",
    title: "Test CreateCampaign",
    description: "This is a generated test to test CreateCampaign",
  });
  testWorkflow.addStep(CreateCampaign, {
    mailchimp_access_token: "test",
    campaign_title: "test",
    subject_line: "test",
    preview_text: "test",
    from_name: "test",
    reply_to: "test",
    audience_id: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05TPV44YKG#/functions/create_campaign");
  assertEquals(actual.inputs, {
    mailchimp_access_token: "test",
    campaign_title: "test",
    subject_line: "test",
    preview_text: "test",
    from_name: "test",
    reply_to: "test",
    audience_id: "test",
  });
});

Deno.test("All outputs of Slack function CreateCampaign should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateCampaign_slack_function",
    title: "Test CreateCampaign",
    description: "This is a generated test to test CreateCampaign",
  });
  const step = testWorkflow.addStep(CreateCampaign, {
    mailchimp_access_token: "test",
    campaign_title: "test",
    subject_line: "test",
    preview_text: "test",
    from_name: "test",
    reply_to: "test",
    audience_id: "test",
  });
  assertExists(step.outputs.id);
  assertExists(step.outputs.status);
  assertExists(step.outputs.url);
});
