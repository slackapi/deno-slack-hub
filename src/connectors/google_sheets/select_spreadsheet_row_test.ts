/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import SelectSpreadsheetRow from "./select_spreadsheet_row.ts";

Deno.test("SelectSpreadsheetRow generates valid FunctionManifest", () => {
  assertEquals(
    SelectSpreadsheetRow.definition.callback_id,
    "slack#/functions/select_spreadsheet_row",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Select a spreadsheet row - Beta",
    description: "This function selects a new from a spreadsheet",
    input_parameters: {
      properties: {
        spreadsheet_id: {
          type: Schema.types.string,
          description: "Select a spreadsheet",
          title: "Spreadsheet",
        },
        sheet_title: {
          type: Schema.types.string,
          description: "Sheet",
          title: "Sheet",
        },
        column_name: {
          type: Schema.types.string,
          description: "Sheet",
          title: "Column Name",
        },
        cell_value: {
          type: Schema.types.string,
          description: "Cell Search Value",
          title: "Cell Search Value",
        },
        google_access_token: {
          type: Schema.slack.types.oauth2,
          description: "Google Credential to use",
          title: "Google Access Token",
        },
      },
      required: [
        "spreadsheet_id",
        "sheet_title",
        "column_name",
        "cell_value",
        "google_access_token",
      ],
    },
    output_parameters: {
      properties: {
        column_values: {
          type: Schema.types.array,
          title: "Column values",
          items: { type: Schema.types.string, description: "Column values" },
        },
        row_index: {
          type: Schema.types.string,
          description: "Row Index",
          title: "Row Index",
        },
      },
      required: ["column_values", "row_index"],
    },
  };
  const actual = SelectSpreadsheetRow.export();

  assertEquals(actual, expected);
});

Deno.test("SelectSpreadsheetRow can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_SelectSpreadsheetRow_slack_function",
    title: "Test SelectSpreadsheetRow",
    description: "This is a generated test to test SelectSpreadsheetRow",
  });
  testWorkflow.addStep(SelectSpreadsheetRow, {
    spreadsheet_id: "test",
    sheet_title: "test",
    column_name: "test",
    cell_value: "test",
    google_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/select_spreadsheet_row");
  assertEquals(actual.inputs, {
    spreadsheet_id: "test",
    sheet_title: "test",
    column_name: "test",
    cell_value: "test",
    google_access_token: "test",
  });
});

Deno.test("All outputs of Slack function SelectSpreadsheetRow should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_SelectSpreadsheetRow_slack_function",
    title: "Test SelectSpreadsheetRow",
    description: "This is a generated test to test SelectSpreadsheetRow",
  });
  const step = testWorkflow.addStep(SelectSpreadsheetRow, {
    spreadsheet_id: "test",
    sheet_title: "test",
    column_name: "test",
    cell_value: "test",
    google_access_token: "test",
  });
  assertExists(step.outputs.column_values);
  assertExists(step.outputs.row_index);
});
