/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import GetRandomGif from "./get_random_gif.ts";

Deno.test("GetRandomGif generates valid FunctionManifest", () => {
  assertEquals(
    GetRandomGif.definition.callback_id,
    "slack#/functions/get_random_gif",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Get a random GIF",
    description:
      "Returns a completely random GIF or a random GIF related to the word or phrase entered",
    input_parameters: {
      properties: {
        tag: {
          type: Schema.types.string,
          description: "Filter results by a specified tag",
          title: "Tag",
        },
        rating: {
          type: Schema.types.string,
          description: "Filter results by a specified rating",
          title: "Rating",
        },
      },
      required: [],
    },
    output_parameters: {
      properties: {
        web_url: {
          type: Schema.types.string,
          description: "A link to this GIF on giphy.com",
          title: "Web URL",
        },
        gif_url: {
          type: Schema.types.string,
          description:
            "The URL for the original version of this GIF that can be used for unfurling in Slack",
          title: "GIF URL",
        },
        title: {
          type: Schema.types.string,
          description: "The title of this GIF",
          title: "Title",
        },
      },
      required: ["web_url", "gif_url"],
    },
  };
  const actual = GetRandomGif.export();

  assertEquals(actual, expected);
});

Deno.test("GetRandomGif can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_GetRandomGif_slack_function",
    title: "Test GetRandomGif",
    description: "This is a generated test to test GetRandomGif",
  });
  testWorkflow.addStep(GetRandomGif, {});
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/get_random_gif");
  assertEquals(actual.inputs, {});
});

Deno.test("All outputs of Slack function GetRandomGif should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_GetRandomGif_slack_function",
    title: "Test GetRandomGif",
    description: "This is a generated test to test GetRandomGif",
  });
  const step = testWorkflow.addStep(GetRandomGif, {});
  assertExists(step.outputs.web_url);
  assertExists(step.outputs.gif_url);
  assertExists(step.outputs.title);
});
