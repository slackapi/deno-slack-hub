/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateTask from "./create_task.ts";

Deno.test("CreateTask can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateTask_slack_function",
    title: "Test CreateTask",
    description: "This is a generated test to test CreateTask",
  });
  testWorkflow.addStep(CreateTask, {
    team_id: "test",
    space_id: "test",
    folder_id: "test",
    list_id: "test",
    name: "test",
    clickup_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05S54578AE#/functions/create_task");
  assertEquals(actual.inputs, {
    team_id: "test",
    space_id: "test",
    folder_id: "test",
    list_id: "test",
    name: "test",
    clickup_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreateTask should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateTask_slack_function",
    title: "Test CreateTask",
    description: "This is a generated test to test CreateTask",
  });
  const step = testWorkflow.addStep(CreateTask, {
    team_id: "test",
    space_id: "test",
    folder_id: "test",
    list_id: "test",
    name: "test",
    clickup_access_token: "test",
  });
  assertExists(step.outputs.task_id);
  assertExists(step.outputs.task_name);
  assertExists(step.outputs.start_date);
  assertExists(step.outputs.due_date);
  assertExists(step.outputs.description);
  assertExists(step.outputs.date_created);
  assertExists(step.outputs.url);
});
