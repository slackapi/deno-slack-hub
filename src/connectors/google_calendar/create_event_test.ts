/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import CreateEvent from "./create_event.ts";

Deno.test("CreateEvent generates valid FunctionManifest", () => {
  assertEquals(
    CreateEvent.definition.callback_id,
    "slack#/functions/create_event",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Add a Google Calendar Event - Beta ",
    description:
      "This step creates event on primary Google calendar and sends out email to attendees.",
    input_parameters: {
      properties: {
        google_access_token: {
          type: Schema.slack.types.oauth2,
          description: "Google Credential to use",
          title: "Google Access Token",
        },
        start_time: {
          type: Schema.slack.types.timestamp,
          description: "Start time for event",
          title: "Start time",
        },
        end_time: {
          type: Schema.slack.types.timestamp,
          description: "End time for event",
          title: "End time",
        },
        attendees: {
          type: Schema.types.string,
          description: "Provide attendees emails for event",
          title: "Attendees",
        },
        summary: {
          type: Schema.types.string,
          description: "Summary of event",
          title: "Summary",
        },
        location: {
          type: Schema.types.string,
          description: "Location of event",
          title: "Location",
        },
        description: {
          type: Schema.types.string,
          description: "Description of event",
          title: "Description",
        },
      },
      required: ["start_time", "end_time", "attendees"],
    },
    output_parameters: {
      properties: {
        event_link: {
          type: Schema.types.string,
          description: "Calendar event link",
          title: "Event link",
        },
      },
      required: [],
    },
  };
  const actual = CreateEvent.export();

  assertEquals(actual, expected);
});

Deno.test("CreateEvent can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateEvent_slack_function",
    title: "Test CreateEvent",
    description: "This is a generated test to test CreateEvent",
  });
  testWorkflow.addStep(CreateEvent, {
    start_time: "test",
    end_time: "test",
    attendees: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/create_event");
  assertEquals(actual.inputs, {
    start_time: "test",
    end_time: "test",
    attendees: "test",
  });
});

Deno.test("All outputs of Slack function CreateEvent should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateEvent_slack_function",
    title: "Test CreateEvent",
    description: "This is a generated test to test CreateEvent",
  });
  const step = testWorkflow.addStep(CreateEvent, {
    start_time: "test",
    end_time: "test",
    attendees: "test",
  });
  assertExists(step.outputs.event_link);
});
