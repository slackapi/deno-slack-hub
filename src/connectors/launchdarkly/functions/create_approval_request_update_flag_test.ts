/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateApprovalRequestUpdateFlag from "./create_approval_request_update_flag.ts";

Deno.test("CreateApprovalRequestUpdateFlag can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateApprovalRequestUpdateFlag_slack_function",
    title: "Test CreateApprovalRequestUpdateFlag",
    description:
      "This is a generated test to test CreateApprovalRequestUpdateFlag",
  });
  testWorkflow.addStep(CreateApprovalRequestUpdateFlag, {
    project_key: "test",
    feature_flag_key: "test",
    environment_key: "test",
    feature_flag_state: "test",
    description: "test",
    launchdarkly_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(
    actual.function_id,
    "A05RF94AFB3#/functions/create_approval_request_update_flag",
  );
  assertEquals(actual.inputs, {
    project_key: "test",
    feature_flag_key: "test",
    environment_key: "test",
    feature_flag_state: "test",
    description: "test",
    launchdarkly_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreateApprovalRequestUpdateFlag should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateApprovalRequestUpdateFlag_slack_function",
    title: "Test CreateApprovalRequestUpdateFlag",
    description:
      "This is a generated test to test CreateApprovalRequestUpdateFlag",
  });
  const step = testWorkflow.addStep(CreateApprovalRequestUpdateFlag, {
    project_key: "test",
    feature_flag_key: "test",
    environment_key: "test",
    feature_flag_state: "test",
    description: "test",
    launchdarkly_access_token: "test",
  });
  assertExists(step.outputs.id);
  assertExists(step.outputs.review_status);
  assertExists(step.outputs.key);
  assertExists(step.outputs.environment_key);
  assertExists(step.outputs.description);
  assertExists(step.outputs.comment);
  assertExists(step.outputs.feature_flag_state);
});
