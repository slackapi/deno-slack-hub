/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import RunFlow from "./run_flow.ts";

Deno.test("RunFlow generates valid FunctionManifest", () => {
  assertEquals(RunFlow.definition.callback_id, "slack#/functions/run_flow");
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Run a Salesforce Flow - Beta",
    description: "Run an Autolaunched Salesforce Flow",
    input_parameters: {
      properties: {
        domain: { type: Schema.types.string, title: "Salesforce domain" },
        flow_name: {
          type: Schema.types.string,
          description: "Flow name (only autolaunched flows are supported)",
          title: "Flow name (only autolaunched flows are supported)",
        },
        metadata: {
          type: Schema.types.string,
          title: "JSON formatted metadata input (TS Only/WIP UI)",
        },
        salesforce_access_token: {
          type: Schema.slack.types.oauth2,
          title: "Salesforce Access Token",
        },
      },
      required: ["domain", "flow_name", "metadata"],
    },
    output_parameters: {
      properties: {
        success: { type: Schema.types.boolean, title: "Response" },
      },
      required: [],
    },
  };
  const actual = RunFlow.export();

  assertEquals(actual, expected);
});

Deno.test("RunFlow can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_RunFlow_slack_function",
    title: "Test RunFlow",
    description: "This is a generated test to test RunFlow",
  });
  testWorkflow.addStep(RunFlow, {
    domain: "test",
    flow_name: "test",
    metadata: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/run_flow");
  assertEquals(actual.inputs, {
    domain: "test",
    flow_name: "test",
    metadata: "test",
  });
});

Deno.test("All outputs of Slack function RunFlow should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_RunFlow_slack_function",
    title: "Test RunFlow",
    description: "This is a generated test to test RunFlow",
  });
  const step = testWorkflow.addStep(RunFlow, {
    domain: "test",
    flow_name: "test",
    metadata: "test",
  });
  assertExists(step.outputs.success);
});
