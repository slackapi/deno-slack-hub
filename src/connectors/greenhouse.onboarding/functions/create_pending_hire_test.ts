/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreatePendingHire from "./create_pending_hire.ts";

Deno.test("CreatePendingHire can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreatePendingHire_slack_function",
    title: "Test CreatePendingHire",
    description: "This is a generated test to test CreatePendingHire",
  });
  testWorkflow.addStep(CreatePendingHire, {
    first_name: "test",
    last_name: "test",
    email: "test",
    work_country_code: "test",
    employment_status: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(
    actual.function_id,
    "A05RY71E6UE#/functions/create_pending_hire",
  );
  assertEquals(actual.inputs, {
    first_name: "test",
    last_name: "test",
    email: "test",
    work_country_code: "test",
    employment_status: "test",
  });
});

Deno.test("All outputs of Slack function CreatePendingHire should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreatePendingHire_slack_function",
    title: "Test CreatePendingHire",
    description: "This is a generated test to test CreatePendingHire",
  });
  const step = testWorkflow.addStep(CreatePendingHire, {
    first_name: "test",
    last_name: "test",
    email: "test",
    work_country_code: "test",
    employment_status: "test",
  });
  assertExists(step.outputs.id);
  assertExists(step.outputs.first_name);
  assertExists(step.outputs.last_name);
  assertExists(step.outputs.email);
  assertExists(step.outputs.work_country_code);
  assertExists(step.outputs.employment_status);
});
