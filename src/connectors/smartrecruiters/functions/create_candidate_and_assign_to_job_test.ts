/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateCandidateAndAssignToJob from "./create_candidate_and_assign_to_job.ts";

Deno.test("CreateCandidateAndAssignToJob can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateCandidateAndAssignToJob_slack_function",
    title: "Test CreateCandidateAndAssignToJob",
    description:
      "This is a generated test to test CreateCandidateAndAssignToJob",
  });
  testWorkflow.addStep(CreateCandidateAndAssignToJob, {
    job_id: "test",
    first_name: "test",
    last_name: "test",
    email: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(
    actual.function_id,
    "A05UG19KZ3K#/functions/create_candidate_and_assign_to_job",
  );
  assertEquals(actual.inputs, {
    job_id: "test",
    first_name: "test",
    last_name: "test",
    email: "test",
  });
});

Deno.test("All outputs of Slack function CreateCandidateAndAssignToJob should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateCandidateAndAssignToJob_slack_function",
    title: "Test CreateCandidateAndAssignToJob",
    description:
      "This is a generated test to test CreateCandidateAndAssignToJob",
  });
  const step = testWorkflow.addStep(CreateCandidateAndAssignToJob, {
    job_id: "test",
    first_name: "test",
    last_name: "test",
    email: "test",
  });
  assertExists(step.outputs.candidate_id);
  assertExists(step.outputs.first_name);
  assertExists(step.outputs.last_name);
  assertExists(step.outputs.email);
  assertExists(step.outputs.phone_number);
});
