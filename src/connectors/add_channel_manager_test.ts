/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import Schema.types from "../../schema_types.ts";
import Schema.slack.types from "../schema_types.ts";
import AddChannelManager from "./add_channel_manager.ts";

Deno.test("AddChannelManager generates valid FunctionManifest", () => {assertEquals(AddChannelManager.definition.callback_id, "slack#/functions/add_channel_manager");
const expected: ManifestFunctionSchema = {source_file: "",
title: "Add Channel Manager",
description: "Add someone a channel manager.",
input_parameters: {properties: {channel_id: {type: SlackTypes.channel_id,
description: "Search all channels",
title: "Select a channel"},
user_ids: {type: SchemaTypes.array,
description: "Search all people",
title: "Select member(s)",
items: {type: SlackTypes.user_id}}},
required: ["channel_id","user_ids"]},
output_parameters: {properties: {user_ids: {type: SchemaTypes.array,
description: "Person(s) who were made channel manager",
title: "Person(s) who were made channel manager",
items: {type: SlackTypes.user_id}}},
required: []}};
const actual = AddChannelManager.export();

assertEquals(actual, expected);});

Deno.test("AddChannelManager can be used as a Slack function in a workflow step", () => {const testWorkflow = DefineWorkflow({callback_id: "test_AddChannelManager_slack_function", 
title: "Test AddChannelManager", 
description: "This is a generated test to test AddChannelManager"});
testWorkflow.addStep(AddChannelManager, {channel_id: "test",
user_ids: "test"});
const actual = testWorkflow.steps[0].export();

assertEquals(actual.function_id, "slack#/functions/add_channel_manager");
assertEquals(actual.inputs, {channel_id: "test",
user_ids: "test"});});

Deno.test("All outputs of Slack function AddChannelManager should exist", () => {const testWorkflow = DefineWorkflow({callback_id: "test_AddChannelManager_slack_function", 
title: "Test AddChannelManager", 
description: "This is a generated test to test AddChannelManager"});
const step = testWorkflow.addStep(AddChannelManager, {channel_id: "test",
user_ids: "test"});
assertExists(step.outputs.user_ids);});