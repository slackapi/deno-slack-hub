/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CommentOnATask from "./comment_on_a_task.ts";

Deno.test("CommentOnATask can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CommentOnATask_slack_function",
    title: "Test CommentOnATask",
    description: "This is a generated test to test CommentOnATask",
  });
  testWorkflow.addStep(CommentOnATask, {
    task: "test",
    text: "test",
    wrike_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05MDPYMGJC#/functions/comment_on_a_task");
  assertEquals(actual.inputs, {
    task: "test",
    text: "test",
    wrike_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CommentOnATask should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CommentOnATask_slack_function",
    title: "Test CommentOnATask",
    description: "This is a generated test to test CommentOnATask",
  });
  const step = testWorkflow.addStep(CommentOnATask, {
    task: "test",
    text: "test",
    wrike_access_token: "test",
  });
  assertExists(step.outputs.comment_id);
  assertExists(step.outputs.author_id);
  assertExists(step.outputs.text);
  assertExists(step.outputs.created_date);
  assertExists(step.outputs.task_id);
});
