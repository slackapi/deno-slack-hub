/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateIssue from "./create_issue.ts";

Deno.test("CreateIssue can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  testWorkflow.addStep(CreateIssue, {
    workspace: "test",
    repo_slug: "test",
    title: "test",
    description: "test",
    assignee_uuid: "test",
    bitbucket_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05Q8KLHEHJ#/functions/create_issue");
  assertEquals(actual.inputs, {
    workspace: "test",
    repo_slug: "test",
    title: "test",
    description: "test",
    assignee_uuid: "test",
    bitbucket_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreateIssue should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  const step = testWorkflow.addStep(CreateIssue, {
    workspace: "test",
    repo_slug: "test",
    title: "test",
    description: "test",
    assignee_uuid: "test",
    bitbucket_access_token: "test",
  });
  assertExists(step.outputs.issue_id);
  assertExists(step.outputs.title);
  assertExists(step.outputs.kind);
  assertExists(step.outputs.priority);
});
