/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import MergePullRequest from "./merge_pull_request.ts";

Deno.test("MergePullRequest can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_MergePullRequest_slack_function",
    title: "Test MergePullRequest",
    description: "This is a generated test to test MergePullRequest",
  });
  testWorkflow.addStep(MergePullRequest, {
    workspace: "test",
    repo_slug: "test",
    pull_request_id: "test",
    bitbucket_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05Q8KLHEHJ#/functions/merge_pull_request");
  assertEquals(actual.inputs, {
    workspace: "test",
    repo_slug: "test",
    pull_request_id: "test",
    bitbucket_access_token: "test",
  });
});

Deno.test("All outputs of Slack function MergePullRequest should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_MergePullRequest_slack_function",
    title: "Test MergePullRequest",
    description: "This is a generated test to test MergePullRequest",
  });
  const step = testWorkflow.addStep(MergePullRequest, {
    workspace: "test",
    repo_slug: "test",
    pull_request_id: "test",
    bitbucket_access_token: "test",
  });
  assertExists(step.outputs.response);
  assertExists(step.outputs.workspace);
  assertExists(step.outputs.repo_slug);
  assertExists(step.outputs.pull_request_id);
});
