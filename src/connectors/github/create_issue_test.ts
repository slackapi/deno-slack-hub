/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import CreateIssue from "./create_issue.ts";

Deno.test("CreateIssue generates valid FunctionManifest", () => {
  assertEquals(
    CreateIssue.definition.callback_id,
    "slack#/functions/create_issue",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Create an issue",
    description: "Creates a new GitHub issue",
    input_parameters: {
      properties: {
        repository: {
          type: Schema.types.string,
          description: "Select a GitHub repository",
          title: "Repository",
        },
        title: { type: Schema.types.string, title: "Title" },
        description: { type: Schema.types.string, title: "Description" },
        github_access_token: {
          type: Schema.slack.types.oauth2,
          description: "GitHub Credential to use",
          title: "Github Access Token",
        },
      },
      required: ["repository", "title", "github_access_token"],
    },
    output_parameters: {
      properties: {
        issue_number: {
          type: Schema.types.string,
          description: "New issue ID",
          title: "Issue number",
        },
        issue_url: {
          type: Schema.types.string,
          description: "New issue URL",
          title: "Issue URL",
        },
      },
      required: ["issue_number", "issue_url"],
    },
  };
  const actual = CreateIssue.export();

  assertEquals(actual, expected);
});

Deno.test("CreateIssue can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  testWorkflow.addStep(CreateIssue, {
    repository: "test",
    title: "test",
    github_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/create_issue");
  assertEquals(actual.inputs, {
    repository: "test",
    title: "test",
    github_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreateIssue should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  const step = testWorkflow.addStep(CreateIssue, {
    repository: "test",
    title: "test",
    github_access_token: "test",
  });
  assertExists(step.outputs.issue_number);
  assertExists(step.outputs.issue_url);
});
