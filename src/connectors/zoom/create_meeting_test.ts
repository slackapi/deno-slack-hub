/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import CreateMeeting from "./create_meeting.ts";

Deno.test("CreateMeeting generates valid FunctionManifest", () => {
  assertEquals(
    CreateMeeting.definition.callback_id,
    "slack#/functions/create_meeting",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Create a Zoom Meeting",
    description: "Create a Zoom meeting",
    input_parameters: {
      properties: {
        topic: {
          type: Schema.types.string,
          description: "Meeting topic",
          title: "Topic",
        },
        agenda: {
          type: Schema.types.string,
          description: "Agenda for the meeting",
          title: "Agenda",
        },
        invitees: {
          type: Schema.types.array,
          description: "Meeting Invitees",
          title: "Invitees",
          items: { type: Schema.slack.types.user_id },
        },
        start_time: {
          type: Schema.slack.types.timestamp,
          description: "Start time of the meeting",
          title: "Start Time",
        },
        zoom_access_token: {
          type: Schema.slack.types.oauth2,
          title: "Zoom access token",
        },
      },
      required: [],
    },
    output_parameters: {
      properties: {
        meeting_id: {
          type: Schema.types.number,
          description: "Meeting Id",
          title: "Meeting Id",
        },
        topic: {
          type: Schema.types.string,
          description: "Topic of the meeting",
          title: "Topic",
        },
        start_time: {
          type: Schema.types.string,
          description: "Start time of the meeting",
          title: "Start Time",
        },
        host_email: {
          type: Schema.types.string,
          description: "Email of the meeting's host",
          title: "Host Email",
        },
        start_url: {
          type: Schema.types.string,
          description: "Start url",
          title: "Start url",
        },
        join_url: {
          type: Schema.types.string,
          description: "Join url",
          title: "Join url",
        },
        invitees: {
          type: Schema.types.array,
          description: "Meeting Invitees",
          title: "Invitees",
          items: { type: Schema.slack.types.user_id },
        },
        invitee_emails: {
          type: Schema.types.array,
          description: "Emails of the Invitees with comma separated",
          title: "Invitee emails",
          items: { type: Schema.types.string },
        },
      },
      required: [],
    },
  };
  const actual = CreateMeeting.export();

  assertEquals(actual, expected);
});

Deno.test("CreateMeeting can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateMeeting_slack_function",
    title: "Test CreateMeeting",
    description: "This is a generated test to test CreateMeeting",
  });
  testWorkflow.addStep(CreateMeeting, {});
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/create_meeting");
  assertEquals(actual.inputs, {});
});

Deno.test("All outputs of Slack function CreateMeeting should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateMeeting_slack_function",
    title: "Test CreateMeeting",
    description: "This is a generated test to test CreateMeeting",
  });
  const step = testWorkflow.addStep(CreateMeeting, {});
  assertExists(step.outputs.meeting_id);
  assertExists(step.outputs.topic);
  assertExists(step.outputs.start_time);
  assertExists(step.outputs.host_email);
  assertExists(step.outputs.start_url);
  assertExists(step.outputs.join_url);
  assertExists(step.outputs.invitees);
  assertExists(step.outputs.invitee_emails);
});
