/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateIssue from "./create_issue.ts";

Deno.test("CreateIssue can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  testWorkflow.addStep(CreateIssue, {
    atlassian_access_token: "test",
    jira_domain: "test",
    project: "test",
    issueType: "test",
    summary: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A04T6GE3LEB#/functions/create_issue");
  assertEquals(actual.inputs, {
    atlassian_access_token: "test",
    jira_domain: "test",
    project: "test",
    issueType: "test",
    summary: "test",
  });
});

Deno.test("All outputs of Slack function CreateIssue should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIssue_slack_function",
    title: "Test CreateIssue",
    description: "This is a generated test to test CreateIssue",
  });
  const step = testWorkflow.addStep(CreateIssue, {
    atlassian_access_token: "test",
    jira_domain: "test",
    project: "test",
    issueType: "test",
    summary: "test",
  });
  assertExists(step.outputs.issue_id);
  assertExists(step.outputs.project);
  assertExists(step.outputs.summary);
  assertExists(step.outputs.description);
  assertExists(step.outputs.issue_type);
});
