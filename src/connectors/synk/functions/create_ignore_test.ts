/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreateIgnore from "./create_ignore.ts";

Deno.test("CreateIgnore can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIgnore_slack_function",
    title: "Test CreateIgnore",
    description: "This is a generated test to test CreateIgnore",
  });
  testWorkflow.addStep(CreateIgnore, {
    org_id: "test",
    project_id: "test",
    issue_id: "test",
    reason_type: "test",
    disregard_if_fixable: "test",
    snyk_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05DD2DNMGF#/functions/create_ignore");
  assertEquals(actual.inputs, {
    org_id: "test",
    project_id: "test",
    issue_id: "test",
    reason_type: "test",
    disregard_if_fixable: "test",
    snyk_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreateIgnore should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreateIgnore_slack_function",
    title: "Test CreateIgnore",
    description: "This is a generated test to test CreateIgnore",
  });
  const step = testWorkflow.addStep(CreateIgnore, {
    org_id: "test",
    project_id: "test",
    issue_id: "test",
    reason_type: "test",
    disregard_if_fixable: "test",
    snyk_access_token: "test",
  });
  assertExists(step.outputs.issue_id);
  assertExists(step.outputs.reason_type);
  assertExists(step.outputs.reason);
});
