/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import UpdateRecord from "./update_record.ts";

Deno.test("UpdateRecord can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_UpdateRecord_slack_function",
    title: "Test UpdateRecord",
    description: "This is a generated test to test UpdateRecord",
  });
  testWorkflow.addStep(UpdateRecord, {
    base_id: "test",
    table_id: "test",
    search_column: "test",
    search_value: "test",
    column_values: "test",
    airtable_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "A05UG04QC4X#/functions/update_record");
  assertEquals(actual.inputs, {
    base_id: "test",
    table_id: "test",
    search_column: "test",
    search_value: "test",
    column_values: "test",
    airtable_access_token: "test",
  });
});

Deno.test("All outputs of Slack function UpdateRecord should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_UpdateRecord_slack_function",
    title: "Test UpdateRecord",
    description: "This is a generated test to test UpdateRecord",
  });
  const step = testWorkflow.addStep(UpdateRecord, {
    base_id: "test",
    table_id: "test",
    search_column: "test",
    search_value: "test",
    column_values: "test",
    airtable_access_token: "test",
  });
  assertExists(step.outputs.record);
  assertExists(step.outputs.record_id);
  assertExists(step.outputs.record_url);
});
