/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../dev_deps.ts";
import CreatePhysicalCard from "./create_physical_card.ts";

Deno.test("CreatePhysicalCard can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreatePhysicalCard_slack_function",
    title: "Test CreatePhysicalCard",
    description: "This is a generated test to test CreatePhysicalCard",
  });
  testWorkflow.addStep(CreatePhysicalCard, {
    user_id: "test",
    card_name: "test",
    address1: "test",
    city: "test",
    country: "test",
    first_name: "test",
    last_name: "test",
    postal_code: "test",
    state: "test",
    amount_limit: "test",
    interval: "test",
    ramp_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(
    actual.function_id,
    "A066PC9JKJ7#/functions/create_physical_card",
  );
  assertEquals(actual.inputs, {
    user_id: "test",
    card_name: "test",
    address1: "test",
    city: "test",
    country: "test",
    first_name: "test",
    last_name: "test",
    postal_code: "test",
    state: "test",
    amount_limit: "test",
    interval: "test",
    ramp_access_token: "test",
  });
});

Deno.test("All outputs of Slack function CreatePhysicalCard should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CreatePhysicalCard_slack_function",
    title: "Test CreatePhysicalCard",
    description: "This is a generated test to test CreatePhysicalCard",
  });
  const step = testWorkflow.addStep(CreatePhysicalCard, {
    user_id: "test",
    card_name: "test",
    address1: "test",
    city: "test",
    country: "test",
    first_name: "test",
    last_name: "test",
    postal_code: "test",
    state: "test",
    amount_limit: "test",
    interval: "test",
    ramp_access_token: "test",
  });
  assertExists(step.outputs.user_id);
  assertExists(step.outputs.deferred_task_id);
});
