/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
import { assertEquals, assertExists } from "../../dev_deps.ts";
import { DefineWorkflow } from "../../dev_deps.ts";
import { ManifestFunctionSchema } from "../../dev_deps.ts";
import { Schema } from "../../deps.ts";
import GetEventLink from "./get_event_link.ts";

Deno.test("GetEventLink generates valid FunctionManifest", () => {
  assertEquals(
    GetEventLink.definition.callback_id,
    "slack#/functions/get_event_link",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Get Calendly Meeting Link",
    description: "This step gets a Calendly meeting link by event type",
    input_parameters: {
      properties: {
        calendly_user: { type: Schema.types.string, title: "Calendly User" },
        event_type: { type: Schema.types.string, title: "Event Type" },
        calendly_access_token: {
          type: Schema.slack.types.oauth2,
          description: "Calendly credential to use",
          title: "Calendly Access Token",
        },
      },
      required: ["calendly_user", "event_type", "calendly_access_token"],
    },
    output_parameters: {
      properties: {
        scheduling_link: {
          type: Schema.types.string,
          description: "A Calendly meeting link for sharing",
          title: "Calendly Meeting Link",
        },
      },
      required: ["scheduling_link"],
    },
  };
  const actual = GetEventLink.export();

  assertEquals(actual, expected);
});

Deno.test("GetEventLink can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_GetEventLink_slack_function",
    title: "Test GetEventLink",
    description: "This is a generated test to test GetEventLink",
  });
  testWorkflow.addStep(GetEventLink, {
    calendly_user: "test",
    event_type: "test",
    calendly_access_token: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/get_event_link");
  assertEquals(actual.inputs, {
    calendly_user: "test",
    event_type: "test",
    calendly_access_token: "test",
  });
});

Deno.test("All outputs of Slack function GetEventLink should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_GetEventLink_slack_function",
    title: "Test GetEventLink",
    description: "This is a generated test to test GetEventLink",
  });
  const step = testWorkflow.addStep(GetEventLink, {
    calendly_user: "test",
    event_type: "test",
    calendly_access_token: "test",
  });
  assertExists(step.outputs.scheduling_link);
});
