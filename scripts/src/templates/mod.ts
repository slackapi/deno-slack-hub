import {
  autogeneratedComment,
  getConnectorObjectName,
  getFunctionName,
  renderFunctionImport,
  renderModuleImport,
} from "./utils.ts";
import { FunctionRecord } from "../types.ts";

export const ConnectorModTemplate = (
  namespace: string,
  functionRecords: FunctionRecord[],
) => {
  const callbackIds = functionRecords.map((dfi) => dfi.callback_id);
  const objectName = getConnectorObjectName(namespace);
  const typescript: string[] = [];
  typescript.push(autogeneratedComment(false));
  callbackIds.forEach((callbackId) => {
    typescript.push(renderFunctionImport(callbackId, "./functions/"));
  });

  typescript.push("");
  typescript.push(
    `const ${objectName} = { functions: {${
      functionRecords.map((dfi) => `${getFunctionName(dfi.callback_id)}`)
        .join(",")
    }}} as const;`,
  );
  typescript.push("");
  typescript.push(`export default ${objectName};`);

  return typescript.join("\n");
};

export const ConnectorsModTemplate = (
  namespaces: string[],
) => {
  const typescript: string[] = [];
  typescript.push(autogeneratedComment(true));
  namespaces.forEach((namespace) => {
    typescript.push(renderModuleImport(namespace));
  });

  typescript.push("");
  typescript.push(
    `const Connectors = {${
      namespaces.map((namespace) => `${getConnectorObjectName(namespace)}`)
        .join(",")
    }} as const;`,
  );
  typescript.push("");
  typescript.push(`export default Connectors;`);

  return typescript.join("\n");
};

export default ConnectorModTemplate;
