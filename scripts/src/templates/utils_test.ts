import {
  autogeneratedComment,
  getConnectorCallbackId,
  getFunctionName,
  renderFunctionImport,
  renderTypeImports,
} from "./utils.ts";
import { assertEquals, assertStringIncludes } from "../dev_deps.ts";
import { FunctionRecord } from "../types.ts";
import { Schema } from "../../../src/deps.ts";

const ID = "FnTest";
const DESCRIPTION = "Test the Slack function template";
const TITLE = "test function";
const CALLBACK_ID = "test_function";
const SLACK_FUNCTION_TYPE = "app";
const APP_ID = "A12345";

Deno.test("Autogenerated comment should contain readme location", () => {
  const actual = autogeneratedComment();
  assertStringIncludes(actual, "src/schema/slack/functions/README.md");
});

Deno.test("Autogenerated comment shouldn't mention the date by default", () => {
  const actual = autogeneratedComment();
  assertStringIncludes(actual, "autogenerated.");
});

Deno.test("Autogenerated comment can include the date", () => {
  const actual = autogeneratedComment(true);
  assertStringIncludes(actual, "autogenerated on ");
});

Deno.test("Function name should be pascal case", () => {
  const actual = getFunctionName(CALLBACK_ID);
  assertEquals(actual, "TestFunction");
});

Deno.test("Function import should contain file path", () => {
  const actual = renderFunctionImport(CALLBACK_ID);
  assertStringIncludes(actual, `./${CALLBACK_ID}.ts`);
});

Deno.test("getSlackCallbackId should generate the valid slack callback_id", () => {
  const actual = `${APP_ID}#/functions/${CALLBACK_ID}`;
  const expected = getConnectorCallbackId({
    id: ID,
    callback_id: CALLBACK_ID,
    title: TITLE,
    app_id: APP_ID,
    description: DESCRIPTION,
    type: SLACK_FUNCTION_TYPE,
    input_parameters: [],
    output_parameters: [],
  });
  assertStringIncludes(actual, expected);
});

Deno.test("renderTypeImports should render all imports provided with slack and primitive types", () => {
  const dfi: FunctionRecord = {
    id: ID,
    callback_id: CALLBACK_ID,
    title: TITLE,
    description: DESCRIPTION,
    app_id: APP_ID,
    type: SLACK_FUNCTION_TYPE,
    input_parameters: [
      {
        type: Schema.slack.types.channel_id,
        name: "channel_id",
        title: "Select a channel",
        is_required: true,
        description: "Search all channels",
      },
    ],
    output_parameters: [
      {
        type: Schema.types.string,
        name: "message_ts",
        title: "Message time stamp",
        description: "Message time stamp",
      },
    ],
  };
  const actual = renderTypeImports(dfi);
  assertStringIncludes(actual, "Schema");
});

Deno.test("renderTypeImports should render imports required for array type", () => {
  const dfi: FunctionRecord = {
    id: ID,
    callback_id: CALLBACK_ID,
    title: TITLE,
    app_id: APP_ID,
    description: DESCRIPTION,
    type: SLACK_FUNCTION_TYPE,
    input_parameters: [],
    output_parameters: [
      {
        type: Schema.types.array,
        name: "user_ids",
        title: "User Ids",
        description: "User Ids",
        items: {
          type: Schema.slack.types.channel_id,
        },
      },
    ],
  };
  const actual = renderTypeImports(dfi);
  assertStringIncludes(actual, "Schema");
});

Deno.test("renderTypeImports should render imports required for object type", () => {
  const dfi: FunctionRecord = {
    id: ID,
    callback_id: CALLBACK_ID,
    title: TITLE,
    app_id: APP_ID,
    description: DESCRIPTION,
    type: SLACK_FUNCTION_TYPE,
    input_parameters: [],
    output_parameters: [
      {
        type: Schema.types.object,
        name: "user_ids",
        title: "User Ids",
        description: "User Ids",
        properties: {
          my_param: {
            type: Schema.slack.types.channel_id,
          },
        },
      },
    ],
  };
  const actual = renderTypeImports(dfi);
  assertStringIncludes(actual, "Schema");
});

Deno.test("renderTypeImports should render imports required for a nested complex object type", () => {
  const dfi: FunctionRecord = {
    id: ID,
    callback_id: CALLBACK_ID,
    title: TITLE,
    app_id: APP_ID,
    description: DESCRIPTION,
    type: SLACK_FUNCTION_TYPE,
    input_parameters: [],
    output_parameters: [
      {
        type: Schema.types.array,
        items: {
          type: Schema.types.object,
          properties: {
            my_primitive_type: {
              type: Schema.slack.types.channel_id,
            },
          },
        },
        name: "user_ids",
      },
    ],
  };
  const actual = renderTypeImports(dfi);
  assertStringIncludes(actual, "Schema");
});

Deno.test("renderTypeImports should render imports required for primitive & complex types", () => {
  const dfi: FunctionRecord = {
    id: ID,
    callback_id: CALLBACK_ID,
    title: TITLE,
    app_id: APP_ID,
    description: DESCRIPTION,
    type: SLACK_FUNCTION_TYPE,
    input_parameters: [],
    output_parameters: [
      {
        type: Schema.types.array,
        items: {
          type: Schema.types.string,
        },
        name: "user_ids",
      },
      {
        type: Schema.types.object,
        name: "my_object",
        properties: {
          my_param: {
            type: Schema.types.string,
          },
        },
      },
      {
        type: Schema.types.string,
        name: "my_primitive",
      },
    ],
  };
  const actual = renderTypeImports(dfi);
  assertStringIncludes(actual, "Schema");
});
